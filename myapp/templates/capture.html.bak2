<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Capture and Classify Image</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        #camera {
            width: 100%;
            height: auto;
        }
        .image-item img {
            max-width: 100px;
            height: auto;
        }
    </style>
</head>
<body class="bg-gray-100">
    <nav class="bg-blue-600 p-4 text-white">
        <div class="container mx-auto flex justify-between items-center">
            <a href="#" class="text-xl font-bold">Capture & Classify</a>
            <div>
                <a href="#" class="px-3 py-2 rounded hover:bg-blue-700">Home</a>
                <a href="#" class="px-3 py-2 rounded hover:bg-blue-700">About</a>
                <a href="#" class="px-3 py-2 rounded hover:bg-blue-700">Contact</a>
            </div>
        </div>
    </nav>

    <div class="container mx-auto mt-10 grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
            <h1 class="text-2xl font-bold mb-4">Capture and Classify Image</h1>
            <div class="bg-white p-4 rounded shadow">
                <video id="camera" class="rounded"></video>
                <button id="captureButton" class="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">Capture</button>
            </div>
            <canvas id="snapshot" style="display: none;"></canvas>
            <form id="uploadForm" method="POST" enctype="multipart/form-data">
                {% csrf_token %}
                <input type="file" id="imageInput" name="image" style="display: none;">
            </form>
        </div>
        <div>
            <h2 class="text-2xl font-bold mb-4">Previously Classified Images</h2>
        <h2 class="text-2xl font-bold mb-4">{{ cart.created_at }}</h2>
        <h2 class="text-2xl font-bold mb-4">{{ cart.updated_at }}</h2>
            <div id="imageList" class="bg-white p-4 rounded shadow space-y-4">
                {% for item in cart.items.all %}
                    <div class="image-item flex items-center space-x-4">
                        <!-- <img src="{{ image.image.url }}" alt="Image" class="rounded"> -->
                        <div>
                            <p>Product Name: {{ item.product.name }}</p>
                            <p>Product Slug: {{ item.product.slug }}</p>
                            <p>Product Quantity in Stock: {{ item.product.quantity_in_stock }}</p>
                            <p>Product Price: {{ item.product.price }}</p>
                            <p>Quantity: {{ item.quantity }}</p>
                            <div class="flex space-x-2">
                                <button class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600">Edit</button>
                                <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                                <button class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600">Report</button>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <script>
        const video = document.getElementById('camera');
        const captureButton = document.getElementById('captureButton');
        const canvas = document.getElementById('snapshot');
        const uploadForm = document.getElementById('uploadForm');
        const imageInput = document.getElementById('imageInput');
        const imageList = document.getElementById('imageList');

        function wait(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
        }

        // Async function to fetch cart items with a delay
        async function fetchCartItemsWithDelay() {
          // Wait for 5 seconds (5000 milliseconds)
          await wait(500);

          // Fetch cart items after the delay
          fetch('/get_cart_items/')
            .then(response => response.json())
            .then(data => {
              let listContainer = document.getElementById('imageList');
              listContainer.innerHTML = ''; // Clear the current list
              data.items.forEach(item => {
                let itemDiv = document.createElement('div');
                itemDiv.classList.add('image-item', 'flex', 'items-center', 'space-x-4');
                itemDiv.innerHTML = `
                  <div>
                    <p>Product Name: ${item.product_name}</p>
                    <p>Product Slug: ${item.product_slug}</p>
                    <p>Product Quantity in Stock: ${item.quantity_in_stock}</p>
                    <p>Product Price: ${item.price}</p>
                    <p>Quantity: ${item.quantity}</p>
                    <div class="flex space-x-2">
                      <button class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600">Edit</button>
                      <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                      <button class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600">Report</button>
                    </div>
                  </div>
                `;
                listContainer.appendChild(itemDiv);
              });
            });
        }

        // Function to get the CSRF token from the cookie
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

        const csrftoken = getCookie('csrftoken');

        // Access the device camera and stream to the video element
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                video.srcObject = stream;
            })
            .catch(err => {
                console.error('Error accessing the camera: ' + err);
            });

        // Capture the image when the capture button is clicked
        captureButton.addEventListener('click', () => {
            const context = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            canvas.toBlob(blob => {
                const file = new File([blob], 'capture.png', { type: 'image/png' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;

                const formData = new FormData(uploadForm);
                formData.append('image', file);

                fetch(uploadForm.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': csrftoken,
                    },
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    // const newImageItem = document.createElement('div');
                    // newImageItem.classList.add('image-item', 'flex', 'items-center', 'space-x-4');
                    // newImageItem.innerHTML = `
                    //     <img src="${data.image_url}" alt="Image" class="rounded">
                    //     <div>
                    //         <p>Class: ${data.output_class}</p>
                    //         <div class="flex space-x-2">
                    //             <button class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600">Edit</button>
                    //             <button class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                    //             <button class="bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600">Report</button>
                    //         </div>
                    //     </div>
                    // `;
                    // imageList.insertAdjacentElement('afterbegin', newImageItem);
                })
                .catch(error => console.error('Error:', error));

                fetchCartItemsWithDelay();
            })
            .catch(error => console.error('Error:', error));

        });
    </script>
</body>
</html>

